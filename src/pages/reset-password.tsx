import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import { resetPasswordInput } from "../server/inputs/resetPassword";
import { trpc } from "../utils/trpc";
import { useState } from "react";
import * as jose from "jose";

const ResetPassword: NextPage = () => {
    const { handleSubmit, register } = useForm<resetPasswordInput>();
    const [mismatch, setMismatch] = useState(false);
    const [notToken, setNotToken] = useState(false);
    const router = useRouter();
    const { mutate, error } = trpc.useMutation(["user.reset-password"], {
        onSuccess: (data) => {
            router.push("/login");
        }
    });

    function onSubmit(data: resetPasswordInput) {
        // check if password and confirm password match
        // get token param from url using useRouter 
        const token = router.asPath.split("=")[1]
        if (token) {
            const email = jose.decodeJwt(token).iss;
            if (data.password !== data.confirmPassword) {
                setMismatch(true);
            } else {
                if (email) {
                    data.email = email;
                    mutate(data);
                }
            }
        } else {
            setNotToken(true);
        }
    }

    return (
        <>
            <Head>
                <title>Change password - Expense App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="flex flex-col justify-center items-center pt-6">
                <span className="text-2xl pb-4">Change your password</span>
                <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col gap-4 w-1/2 mobile:w-full mobile:px-4 mobile:justify-centerr">
                    {mismatch && <div className="text-red-500">Password and Confirm Password do not match</div>}
                    {error && <div className="text-red-500">{error.message}</div>}
                    {notToken && <div className="text-red-500">Invalid token, please pass a valid token.</div>}
                    <input
                        type="password" placeholder="password"
                        className="border-2 border-gray-700 p-2"
                        {...register('password')} />

                    <input
                        type="password" placeholder="confirmPassword"
                        className="border-2 border-gray-700 p-2"
                        {...register('confirmPassword')} />

                    <button type="submit" className="border-2 border-gray-700 p-2 bg-blue-600 text-white text-xl uppercase">change password</button>
                </form>
            </div>


        </>
    );
};


export default ResetPassword;
